{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar NullaryStrided1dDispatch = require( '@stdlib/ndarray-base-nullary-strided1d-dispatch' );\n\n\n// MAIN //\n\n/**\n* Returns a function for applying a strided function to a provided ndarray.\n*\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided function\n* @param {StringArray} [table.types] - one-dimensional list of ndarray data types describing specialized output ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns] - list of strided functions which are specific to specialized output ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Options} [options] - function options\n* @param {boolean} [options.strictTraversalOrder=false] - boolean specifying whether to require that element traversal match the memory layout of an output ndarray\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {Error} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function for applying a strided function to an ndarray\n*\n* @example\n* var base = require( '@stdlib/blas-ext-base-ndarray-gsorthp' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'all' );\n*\n* var table = {\n*     'default': base\n* };\n* var sorthp = factory( table, [ idt ], odt );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var o = scalar2ndarray( 1.0, {\n*     'dtype': 'generic'\n* });\n*\n* var out = sorthp( x, o );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ -3.0, -1.0, 2.0 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\nfunction factory( table, idtypes, odtypes, options ) {\n\tvar f;\n\tif ( arguments.length > 3 ) {\n\t\tf = new NullaryStrided1dDispatch( table, idtypes, odtypes, options );\n\t} else {\n\t\tf = new NullaryStrided1dDispatch( table, idtypes, odtypes );\n\t}\n\treturn assign;\n\n\t/**\n\t* Applies a strided function and assigns results to a provided output ndarray.\n\t*\n\t* @private\n\t* @param {ndarrayLike} out - output ndarray\n\t* @param {...ndarrayLike} [args] - additional ndarray arguments\n\t* @param {Options} [options] - function options\n\t* @param {IntegerArray} [options.dims] - list of dimensions over which to perform operation\n\t* @throws {TypeError} first argument must be an ndarray\n\t* @throws {TypeError} first argument must have a supported data type\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n\t* @throws {RangeError} number of dimension indices must not exceed the number of output ndarray dimensions\n\t* @throws {Error} must provide valid options\n\t* @returns {ndarrayLike} output ndarray\n\t*/\n\tfunction assign() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn f.assign.apply( f, args );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create a function for applying a strided function to a provided ndarray.\n*\n* @module @stdlib/ndarray-base-nullary-strided1d-dispatch-factory\n*\n* @example\n* var base = require( '@stdlib/blas-ext-base-ndarray-gsorthp' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\n* var ndarray2array = require( '@stdlib/ndarray-to-array' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n* var factory = require( '@stdlib/ndarray-base-nullary-strided1d-dispatch-factory' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = dtypes( 'all' );\n*\n* var table = {\n*     'default': base\n* };\n* var sorthp = factory( table, [ idt ], odt );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var order = scalar2ndarray( 1.0, {\n*     'dtype': 'generic'\n* });\n*\n* var out = sorthp( x, order );\n* // returns <ndarray>\n*\n* var arr = ndarray2array( x );\n* // returns [ -3.0, -1.0, 2.0 ]\n*\n* var bool = ( out === x );\n* // returns true\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAA2B,QAAS,iDAAkD,EAuD1F,SAASC,EAASC,EAAOC,EAASC,EAASC,EAAU,CACpD,IAAIC,EACJ,OAAK,UAAU,OAAS,EACvBA,EAAI,IAAIN,EAA0BE,EAAOC,EAASC,EAASC,CAAQ,EAEnEC,EAAI,IAAIN,EAA0BE,EAAOC,EAASC,CAAQ,EAEpDG,EAkBP,SAASA,GAAS,CACjB,IAAIC,EACAC,EAGJ,IADAD,EAAO,CAAC,EACFC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAClCD,EAAK,KAAM,UAAWC,CAAE,CAAE,EAE3B,OAAOH,EAAE,OAAO,MAAOA,EAAGE,CAAK,CAChC,CACD,CAKAT,EAAO,QAAUE,ICzDjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "NullaryStrided1dDispatch", "factory", "table", "idtypes", "odtypes", "options", "f", "assign", "args", "i", "main"]
}
